name: Week 1 data4
on: [push]

jobs:
  data4:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Run data4 on Ubuntu and print results
        shell: bash
        run: |
          set -euxo pipefail

          # Ensure expected folders exist (in case they're gitignored)
          mkdir -p week1/test/py

          # Make code see datasets as ./data (same as local runs)
          ln -sfn ../../data week1/code/genome-assembly/data

          # Raise stack to avoid segfault on deep recursion
          ulimit -s 8192000

          # Run the assembler; capture stdout/stderr like you did locally
          cd week1/code/genome-assembly
          /usr/bin/time -p python3 main.py data/data4 > ../../test/py/data4.stdout 2> ../../test/py/data4.stderr
          cd - >/dev/null

          # Read runtime (seconds) and format as H:MM:SS
          secs=$(awk '/^real/{print $2}' week1/test/py/data4.stderr)
          hms=$(awk -v s="$secs" 'BEGIN{h=int(s/3600); s-=h*3600; m=int(s/60); s-=m*60; printf("%d:%02d:%02d\n",h,m,int(s+0.5))}')

          # Compute N50 from final contigs FASTA (multi-line sequences supported)
          n50=$(
            awk 'BEGIN{len=0}
                 /^>/{ if(len){ print len; len=0 } ; next }
                 { gsub(/[^ACGTNacgtn]/,""); len+=length($0) }
                 END{ if(len) print len }' week1/data/data4/contig.fasta \
            | sort -nr \
            | awk '{a[NR]=$1; sum+=$1}
                   END{
                     half=sum/2; acc=0;
                     for(i=1;i<=NR;i++){
                       acc+=a[i];
                       if(acc>=half){ print a[i]; exit }
                     }
                   }'
          )

          echo -e "Dataset\tLanguage\tRuntime\tN50"
          echo -e "data4\tpython\t${hms}\t${n50}"
